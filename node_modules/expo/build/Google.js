import { Constants } from 'expo-constants';
import { NativeModules, Platform } from 'react-native';
const Google = NativeModules.ExponentGoogle;
export async function logInAsync(config) {
    let behavior = config.behavior;
    if (!behavior) {
        behavior = 'system';
    }
    // Only standalone apps can use system login.
    if (Constants.appOwnership !== 'standalone' && (behavior === 'system' && Platform.OS === "android")) {
        behavior = 'web';
    }
    let scopes = config.scopes;
    if (!scopes) {
        scopes = ['profile', 'email'];
    }
    const androidClientId = Constants.appOwnership === 'standalone'
        ? config.androidStandaloneAppClientId
        : config.androidClientId;
    const iosClientId = Constants.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;
    const logInResult = await Google.logInAsync({
        androidClientId: androidClientId || config.clientId,
        iosClientId: iosClientId || config.clientId,
        webClientId: config.webClientId,
        behavior,
        scopes,
    });
    if (behavior === 'web') {
        // Web login only returns an accessToken so use it to fetch the same info as the native login
        // does.
        let userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {
            headers: { Authorization: `Bearer ${logInResult.accessToken}` },
        });
        let userInfo = await userInfoResponse.json();
        return {
            ...logInResult,
            user: {
                id: userInfo.id,
                name: userInfo.name,
                givenName: userInfo.given_name,
                familyName: userInfo.family_name,
                photoUrl: userInfo.picture,
                email: userInfo.email,
            },
        };
    }
    else {
        return logInResult;
    }
}
//# sourceMappingURL=Google.js.map