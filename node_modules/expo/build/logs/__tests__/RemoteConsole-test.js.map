{"version":3,"file":"RemoteConsole-test.js","sourceRoot":"","sources":["../../../src/logs/__tests__/RemoteConsole-test.ts"],"names":[],"mappings":"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","sourcesContent":["// import { EXPO_CONSOLE_METHOD_NAME } from '../LogSerialization';\nimport RemoteConsole from '../RemoteConsole';\nimport RemoteLogging from '../RemoteLogging';\n\njest.mock('../RemoteLogging', () => {\n  return {\n    enqueueRemoteLogAsync: jest.fn(async () => {}),\n  };\n});\n\nlet console;\nconst mockOriginalConsole = {\n  assert: jest.fn(),\n  debug: jest.fn(),\n  log: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn(),\n  group: jest.fn(),\n  groupCollapsed: jest.fn(),\n  groupEnd: jest.fn(),\n  takeHeapSnapshot: jest.fn(),\n  memory: {\n    jsHeapSizeLimit: 4 * 1024 ** 3,\n    totalJSHeapSize: 20 * 1024 ** 2,\n    usedJSHeapSize: 10 * 1024 ** 2,\n  },\n} as any;\n\nbeforeEach(() => {\n  console = RemoteConsole.createRemoteConsole(mockOriginalConsole);\n});\n\nit(`exposes un-overridden methods of the original console`, () => {\n  expect(() => console.takeHeapSnapshot()).not.toThrow();\n  expect(mockOriginalConsole.takeHeapSnapshot).toHaveBeenCalledTimes(1);\n});\n\nit(`exposes un-overridden non-function properties of the original console`, () => {\n  expect(console.memory).toBeDefined();\n  expect(console.memory).toMatchSnapshot();\n});\n\n// it(`uses a sentinel value to name custom console methods`, () => {\n//   (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mockImplementationOnce(() => {\n//     throw new Error('Intentional test error');\n//   });\n//   expect.assertions(1);\n\n//   try {\n//     console.log();\n//   } catch (error) {\n//     expect(error.stack).toMatch(EXPO_CONSOLE_METHOD_NAME);\n//   }\n// });\n\ndescribe(`asserting`, () => {\n  it(`does nothing when the test condition passes`, () => {\n    console.assert(true);\n    expect(RemoteLogging.enqueueRemoteLogAsync).not.toHaveBeenCalled();\n\n    console.assert(1);\n    expect(RemoteLogging.enqueueRemoteLogAsync).not.toHaveBeenCalled();\n\n    console.assert({});\n    expect(RemoteLogging.enqueueRemoteLogAsync).not.toHaveBeenCalled();\n  });\n\n  it(`reports failed assertions as errors`, () => {\n    console.assert(false);\n    expect(RemoteLogging.enqueueRemoteLogAsync).toHaveBeenCalledTimes(1);\n    expect((RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mock.calls[0][0]).toBe('error');\n  });\n\n  it(`formats string messages`, () => {\n    console.assert(false, 'oh no');\n    expect(RemoteLogging.enqueueRemoteLogAsync).toHaveBeenCalledTimes(1);\n    expect((RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mock.calls[0][2]).toMatchSnapshot();\n  });\n\n  it(`adds a failed assertion notice to non-string messages`, () => {\n    console.assert(false, {});\n    expect(RemoteLogging.enqueueRemoteLogAsync).toHaveBeenCalledTimes(1);\n    expect((RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mock.calls[0][2]).toMatchSnapshot();\n  });\n});\n\ndescribe('logging', () => {\n  let data = ['hi', { a: 'b' }, [1, 2], null, false];\n\n  it(`logs debug data at the \"info\" level`, () => {\n    console.debug(...data);\n    expect(mockOriginalConsole.debug).toHaveBeenCalledTimes(1);\n    expect(mockOriginalConsole.debug).toHaveBeenCalledWith(...data);\n    _expectDataLoggingLevel('info');\n  });\n\n  it(`logs log data at the \"info\" level`, () => {\n    console.log(...data);\n    expect(mockOriginalConsole.log).toHaveBeenCalledTimes(1);\n    expect(mockOriginalConsole.log).toHaveBeenCalledWith(...data);\n    _expectDataLoggingLevel('info');\n  });\n\n  it(`logs info data at the \"info\" level`, () => {\n    console.info(...data);\n    expect(mockOriginalConsole.info).toHaveBeenCalledTimes(1);\n    expect(mockOriginalConsole.info).toHaveBeenCalledWith(...data);\n    _expectDataLoggingLevel('info');\n  });\n\n  it(`logs warning data at the \"warn\" level`, () => {\n    console.warn(...data);\n    expect(mockOriginalConsole.warn).toHaveBeenCalledTimes(1);\n    expect(mockOriginalConsole.warn).toHaveBeenCalledWith(...data);\n    _expectDataLoggingLevel('warn');\n  });\n\n  it(`logs error data at the \"error\" level`, () => {\n    console.error(...data);\n    expect(mockOriginalConsole.error).toHaveBeenCalledTimes(1);\n    expect(mockOriginalConsole.error).toHaveBeenCalledWith(...data);\n    _expectDataLoggingLevel('error');\n  });\n\n  function _expectDataLoggingLevel(level) {\n    expect(RemoteLogging.enqueueRemoteLogAsync).toHaveBeenCalledTimes(1);\n    expect((RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mock.calls[0][0]).toBe(level);\n    expect((RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mock.calls[0][2]).toEqual(data);\n  }\n});\n\ndescribe('grouping', () => {\n  it(`labels groups`, () => {\n    console.group('group 1');\n    expect(RemoteLogging.enqueueRemoteLogAsync).toHaveBeenCalled();\n    expect((RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mock.calls[0][2]).toEqual(['group 1']);\n  });\n\n  it(`labels collapsed groups`, () => {\n    console.groupCollapsed('group 2');\n    expect(RemoteLogging.enqueueRemoteLogAsync).toHaveBeenCalled();\n    expect((RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mock.calls[0][2]).toEqual(['group 2']);\n  });\n\n  it(`increases the group depth`, () => {\n    console.log();\n    _expectGroupDepthToBe(0);\n\n    console.group();\n    console.log();\n    _expectGroupDepthToBe(1);\n\n    console.group();\n    console.log();\n    _expectGroupDepthToBe(2);\n  });\n\n  it(`decreases the group depth`, () => {\n    console.group();\n    console.group();\n    console.log();\n    _expectGroupDepthToBe(2);\n\n    console.groupEnd();\n    _expectGroupDepthToBe(1);\n\n    console.groupEnd();\n    _expectGroupDepthToBe(0);\n  });\n\n  it(`prevents negative group depths`, () => {\n    console.log();\n    _expectGroupDepthToBe(0);\n\n    // Attempt to make the depth negative\n    console.groupEnd();\n    _expectGroupDepthToBe(0);\n\n    // Test that the depth counts from zero\n    console.group();\n    console.log();\n    _expectGroupDepthToBe(1);\n  });\n\n  it(`supports collapsed groups`, () => {\n    console.groupCollapsed();\n    expect(RemoteLogging.enqueueRemoteLogAsync).toHaveBeenCalled();\n    expect((RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mock.calls[0][1]).toMatchObject({\n      groupCollapsed: true,\n    });\n\n    console.log();\n    _expectGroupDepthToBe(1);\n  });\n\n  it(`sends the grouping depth with each call`, () => {\n    console.group();\n    (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mockClear();\n\n    console.debug();\n    _expectGroupDepthToBe(1);\n    (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mockClear();\n\n    console.log();\n    _expectGroupDepthToBe(1);\n    (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mockClear();\n\n    console.info();\n    _expectGroupDepthToBe(1);\n    (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mockClear();\n\n    console.warn();\n    _expectGroupDepthToBe(1);\n    (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mockClear();\n\n    console.error();\n    _expectGroupDepthToBe(1);\n    (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mockClear();\n\n    console.assert(false);\n    _expectGroupDepthToBe(1);\n    (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mockClear();\n\n    console.group();\n    _expectGroupDepthToBe(1);\n    (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mockClear();\n\n    console.groupEnd();\n    _expectGroupDepthToBe(1);\n    (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mockClear();\n  });\n\n  function _expectGroupDepthToBe(depth) {\n    expect(RemoteLogging.enqueueRemoteLogAsync).toHaveBeenCalled();\n\n    let calls = (RemoteLogging.enqueueRemoteLogAsync as jest.Mock).mock.calls;\n    expect(calls[calls.length - 1][1]).toMatchObject({\n      groupDepth: depth,\n    });\n  }\n});\n"]}