{"version":3,"file":"LogSerialization-test.js","sourceRoot":"","sources":["../../../src/logs/__tests__/LogSerialization-test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Constants } from 'expo-constants';\nimport React from 'react';\nimport symbolicateStackTrace from 'react-native/Libraries/Core/Devtools/symbolicateStackTrace';\nimport TestRenderer from 'react-test-renderer';\n\nimport LogSerialization from '../LogSerialization';\nimport { LogErrorData } from '../RemoteLogging';\n\njest.mock('react-native/Libraries/Core/Devtools/symbolicateStackTrace', () =>\n  jest.fn(\n    async stack =>\n      // We don't test symbolication itself in this test, partly because it's complex\n      stack\n  )\n);\n\njest.mock('expo-constants', () => ({\n  Constants: {\n    manifest: {\n      developer: {\n        projectRoot: '/home/test/project',\n      },\n    },\n  },\n}));\n\nit(`serializes simple log messages`, async () => {\n  let result = await LogSerialization.serializeLogDataAsync(\n    ['hi', 1, true, 0, '', null, false, undefined],\n    'info'\n  );\n  expect(result.body).toEqual(['hi', '1', 'true', '0', '', 'null', 'false', 'undefined']);\n  expect(result.includesStack).toBeFalsy();\n});\n\nit(`serializes nested objects`, async () => {\n  let result = await LogSerialization.serializeLogDataAsync(\n    [{ outer: { inner: [[], {}] } }],\n    'info'\n  );\n  expect(result.body).toMatchSnapshot();\n  expect(result.includesStack).toBeFalsy();\n});\n\nit(`serializes functions`, async () => {\n  let result = await LogSerialization.serializeLogDataAsync([function test() {}, () => {}], 'info');\n  expect(result.body).toEqual(['[Function test]', '[Function anonymous]']);\n  expect(result.includesStack).toBeFalsy();\n});\n\nit(`serializes symbols`, async () => {\n  let result = await LogSerialization.serializeLogDataAsync(\n    [Symbol('test'), Symbol.iterator],\n    'info'\n  );\n  expect(result.body).toEqual(['Symbol(test)', 'Symbol(Symbol.iterator)']);\n  expect(result.includesStack).toBeFalsy();\n});\n\nit(`serializes promises`, async () => {\n  let result = await LogSerialization.serializeLogDataAsync(\n    [Promise.resolve('test'), Promise.reject(new Error('Expected'))],\n    'info'\n  );\n  expect(result.body.length).toBe(2);\n  expect(result.body[0]).toMatch('Promise');\n  expect(result.body[1]).toMatch('Promise');\n  expect(result.includesStack).toBeFalsy();\n});\n\nit(`serializes React elements`, async () => {\n  class TestComponent extends React.Component {\n    render () {\n      return <TestComponent />;\n    }\n  }\n\n  let result = await LogSerialization.serializeLogDataAsync([<TestComponent />], 'info');\n  expect(Array.isArray(result.body)).toBe(true);\n  expect(result.includesStack).toBeFalsy();\n});\n\nit(`serializes React components (refs)`, async () => {\n  class TestComponent extends React.Component {\n    child: React.Component | null = null;\n    render() {\n      return <ChildComponent ref={component => (this.child = component)} />;\n    }\n  }\n  class ChildComponent extends React.Component {\n    render() {\n      return 'test';\n    }\n  }\n\n  let testRenderer = TestRenderer.create(<TestComponent />);\n  let result = await LogSerialization.serializeLogDataAsync(\n    [testRenderer.root.instance.child],\n    'info'\n  );\n  expect(Array.isArray(result.body)).toBe(true);\n  expect(result.body[0]).toMatch('ChildComponent');\n  expect(result.includesStack).toBeFalsy();\n});\n\ndescribe('with stack trace support in Expo CLI', () => {\n  it(`includes a symbolicated stack trace when logging an error`, async () => {\n    let mockError = _getMockError('Test error');\n    let result = await LogSerialization.serializeLogDataAsync([mockError], 'info');\n    expect(symbolicateStackTrace).toHaveBeenCalledTimes(1);\n\n    expect(Array.isArray(result.body)).toBe(true);\n    expect(result.body.length).toBe(1);\n    expect((result.body[0] as LogErrorData).message).toBe('Test error');\n    expect((result.body[0] as LogErrorData).stack).toMatchSnapshot();\n    expect(result.includesStack).toBe(true);\n  });\n\n  it(`can symbolicate errors from V8`, async () => {\n    let mockError = _getMockV8Error('Test error');\n    let result = await LogSerialization.serializeLogDataAsync([mockError], 'info');\n    expect(symbolicateStackTrace).toHaveBeenCalledTimes(1);\n\n    expect(Array.isArray(result.body)).toBe(true);\n    expect(result.body.length).toBe(1);\n    expect((result.body[0] as LogErrorData).message).toBe('Test error');\n    expect((result.body[0] as LogErrorData).stack).toMatch('_exampleFunction');\n    expect(result.includesStack).toBe(true);\n  });\n\n  it(`includes a symbolicated stack trace when warning`, async () => {\n    let result = await LogSerialization.serializeLogDataAsync(['warning message'], 'warn');\n    expect(symbolicateStackTrace).toHaveBeenCalledTimes(1);\n\n    expect(Array.isArray(result.body)).toBe(true);\n    expect(result.body.length).toBe(1);\n    expect((result.body[0] as LogErrorData).message).toBe('warning message');\n    expect((result.body[0] as LogErrorData).stack).toBeDefined();\n    expect(result.includesStack).toBe(true);\n  });\n\n  it(`includes a symbolicated stack trace when erroring`, async () => {\n    let result = await LogSerialization.serializeLogDataAsync(['error message'], 'error');\n    expect(symbolicateStackTrace).toHaveBeenCalledTimes(1);\n\n    expect(Array.isArray(result.body)).toBe(true);\n    expect(result.body.length).toBe(1);\n    expect((result.body[0] as LogErrorData).message).toBe('error message');\n    expect((result.body[0] as LogErrorData).stack).toBeDefined();\n    expect(result.includesStack).toBe(true);\n  });\n\n  it(`uses the provided error's stack trace when erroring`, async () => {\n    let mockError = _getMockError('Test error');\n    let result = await LogSerialization.serializeLogDataAsync([mockError], 'error');\n    expect(symbolicateStackTrace).toHaveBeenCalledTimes(1);\n\n    expect(Array.isArray(result.body)).toBe(true);\n    expect(result.body.length).toBe(1);\n    expect((result.body[0] as LogErrorData).message).toBe('Test error');\n    expect((result.body[0] as LogErrorData).stack).toMatch('_exampleFunction');\n  });\n\n  it(`symbolicates unhandled promise rejections`, async () => {\n    let warningMessage = _getMockUnhandledPromiseRejection();\n    let result = await LogSerialization.serializeLogDataAsync([warningMessage], 'warn');\n    expect(symbolicateStackTrace).toHaveBeenCalledTimes(1);\n\n    expect(Array.isArray(result.body)).toBe(true);\n    expect(result.body.length).toBe(1);\n    expect((result.body[0] as LogErrorData).message).toMatch('Unhandled promise rejection: ');\n    expect((result.body[0] as LogErrorData).stack).toBeDefined();\n    expect(result.includesStack).toBe(true);\n  });\n\n  it(`doesn't fail if the error has no stack frames`, async () => {\n    let mockError = new Error('Test error');\n    mockError.stack = mockError.stack!.split('\\n')[0];\n\n    let result = await LogSerialization.serializeLogDataAsync([mockError], 'info');\n    expect(result).toMatchSnapshot();\n  });\n\n  it(`doesn't fail if the error stack property is missing`, async () => {\n    let mockError = new Error('Test error');\n    mockError.stack = undefined;\n\n    let result = await LogSerialization.serializeLogDataAsync([mockError], 'info');\n    expect(result).toMatchSnapshot();\n  });\n\n  it(`doesn't fail if symbolication fails`, async () => {\n    (symbolicateStackTrace as jest.Mock).mockImplementationOnce(async () => {\n      throw new Error('Intentional symbolication error');\n    });\n\n    let mockError = _getMockError('Test error');\n    let result = await LogSerialization.serializeLogDataAsync([mockError], 'error');\n    expect(symbolicateStackTrace).toHaveBeenCalledTimes(1);\n\n    expect(Array.isArray(result.body)).toBe(true);\n    expect(result.body.length).toBe(1);\n    expect((result.body[0] as LogErrorData).message).toBe('Test error');\n    expect((result.body[0] as LogErrorData).stack).toMatchSnapshot();\n    expect(result.includesStack).toBe(true);\n  });\n});\n\ndescribe(`without stack trace support in Expo CLI`, () => {\n  let originalProjectRoot;\n\n  beforeAll(() => {\n    originalProjectRoot = Constants.manifest.developer.projectRoot;\n    delete Constants.manifest.developer.projectRoot;\n  });\n\n  afterAll(() => {\n    Constants.manifest.developer.projectRoot = originalProjectRoot;\n  });\n\n  it(`doesn't capture a stack trace`, async () => {\n    let result = await LogSerialization.serializeLogDataAsync(['oh no'], 'error');\n    expect(result.includesStack).toBeFalsy();\n    expect(symbolicateStackTrace).not.toHaveBeenCalled();\n  });\n});\n\nfunction _getMockError(message) {\n  let error = new Error(message);\n  error.stack = `_exampleFunction@/home/test/project/App.js:125:13\n_depRunCallbacks@/home/test/project/node_modules/dep/index.js:77:45\ntryCallTwo@/home/test/project/node_modules/react-native/node_modules/promise/lib/core.js:45:5\ndoResolve@/home/test/project/node_modules/react-native/node_modules/promise/lib/core.js:200:13`;\n  return error;\n}\n\nfunction _getMockV8Error(message) {\n  let error = new Error(message);\n  let mockStack = `\n  at _exampleFunction (/home/test/project/App.js:125:13)\n  at _depRunCallbacks (/home/test/project/node_modules/dep/index.js:77:45)\n  at tryCallTwo (/home/test/project/node_modules/react-native/node_modules/promise/lib/core.js:45:5)\n  at doResolve (/home/test/project/node_modules/react-native/node_modules/promise/lib/core.js:200:13)`;\n  error.stack = error.stack!.split('\\n')[0] + mockStack;\n  return error;\n}\n\nfunction _getMockUnhandledPromiseRejection() {\n  return `Possible Unhandled Promise Rejection (id: 0):\nError: Intentionally unhandled async error\n_callee$@http://localhost:19001/entry.bundle?platform=ios&dev=true&strict=false&minify=false&hot=false&assetPlugin=/home/test/project/node_modules/expo/tools/hashAssetFiles:99344:32\ntryCatch@http://localhost:19001/entry.bundle?platform=ios&dev=true&strict=false&minify=false&hot=false&assetPlugin=/home/test/project/node_modules/expo/tools/hashAssetFiles:12301:44\ninvoke@http://localhost:19001/entry.bundle?platform=ios&dev=true&strict=false&minify=false&hot=false&assetPlugin=/home/test/project/node_modules/expo/tools/hashAssetFiles:12489:30`;\n}\n"]}