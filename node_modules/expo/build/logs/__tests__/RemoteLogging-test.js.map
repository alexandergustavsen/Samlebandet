{"version":3,"file":"RemoteLogging-test.js","sourceRoot":"","sources":["../../../src/logs/__tests__/RemoteLogging-test.ts"],"names":[],"mappings":"AAAA,OAAO,gBAAgB,MAAM,qBAAqB,CAAC;AACnD,OAAO,aAAa,EAAE,EAAE,2BAA2B,EAAE,MAAM,kBAAkB,CAAC;AAE9E,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;IAC1B,MAAM;QACJ,OAAO;YACL,QAAQ;gBACN,OAAO,sCAAsC,CAAC;YAChD,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC,CAAC,CAAC;AAEJ,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,CAAC;IACtC,qBAAqB,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAC,IAAI,EAAC,EAAE;QAC1C,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC9C,aAAa,EAAE,KAAK;SACrB,CAAC;IACJ,CAAC,CAAC;CACH,CAAC,CAAC,CAAC;AAEJ,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,CAAC;IACjC,SAAS,EAAE,OAAO,CAAC,uCAAuC,CAAC;CAC5D,CAAC,CAAC,CAAC;AAEJ,IAAI,aAAa,CAAC;AAElB,SAAS,CAAC,KAAK,IAAI,EAAE;IACnB,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC;IAC7B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,mBAAmB,EAAE,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,GAAG,EAAE;IACZ,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC;AAC/B,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;IACxC,MAAM,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAClE,MAAM,2BAA2B,EAAE,CAAC;IAEpC,MAAM,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACxE,MAAM,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACvC,MAAM,CAAE,KAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IACnF,MAAM,CAAE,KAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACxE,MAAM,CAAE,KAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,eAAe,EAAE,CAAC;IACxE,MAAM,CAAE,KAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;IACrE,IAAI,YAAY,CAAC;IAChB,KAAmB,CAAC,sBAAsB,CACzC,GAAG,EAAE,CACH,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;QACpB,YAAY,GAAG,OAAO,CAAC;IACzB,CAAC,CAAC,CACL,CAAC;IAEF,MAAM,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACjE,MAAM,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACjE,MAAM,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEhE,MAAM,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACvC,YAAY,CAAC,mBAAmB,EAAE,CAAC,CAAC;IAEpC,MAAM,2BAA2B,EAAE,CAAC;IACpC,MAAM,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACxE,MAAM,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;IAC9D,IAAI,WAAW,CAAC;IACf,KAAmB,CAAC,sBAAsB,CACzC,GAAG,EAAE,CACH,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9B,WAAW,GAAG,MAAM,CAAC;IACvB,CAAC,CAAC,CACL,CAAC;IAEF,MAAM,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACjE,MAAM,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEjE,MAAM,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACvC,WAAW,CAAC,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;IAEtD,MAAM,2BAA2B,EAAE,CAAC;IACpC,MAAM,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACvC,MAAM,CAAE,KAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;IACnE,gBAAgB,CAAC,qBAAmC,CAAC,sBAAsB,CAAC,KAAK,IAAI,EAAE;QACtF,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,MAAM,MAAM,CAAC,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IAC/F,MAAM,2BAA2B,EAAE,CAAC;IACpC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;IAErC,MAAM,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACjE,MAAM,2BAA2B,EAAE,CAAC;IACpC,MAAM,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACvC,MAAM,CAAE,KAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,YAAY,CAAC;IACjB,IAAI,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAE7B,SAAS,CAAC,GAAG,EAAE;QACb,YAAY,GAAG,aAAa,CAAC,yBAAyB,CAAC,YAAY,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,GAAG,EAAE;QACZ,YAAY,CAAC,MAAM,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACxD,KAAmB,CAAC,sBAAsB,CAAC,KAAK,IAAI,EAAE;YACrD,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,MAAM,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClE,MAAM,2BAA2B,EAAE,CAAC;QAEpC,MAAM,CAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAE,YAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QACzE,MAAM,CAAE,YAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;QAC1G,MAAM,CAAE,YAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACnE,KAAmB,CAAC,sBAAsB,CAAC,KAAK,IAAI,EAAE,CAAC,mBAAmB,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QAE9F,MAAM,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClE,MAAM,2BAA2B,EAAE,CAAC;QAEpC,MAAM,CAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAE,YAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QACzE,MAAM,CAAE,YAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;QAC3E,MAAM,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClE,MAAM,2BAA2B,EAAE,CAAC;QAEpC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,SAAS,mBAAmB,CAAC,MAAM,GAAG,EAAE;IACtC,OAAO;QACL,MAAM,EAAE,GAAG;QACX,GAAG,MAAM;KACV,CAAC;AACJ,CAAC","sourcesContent":["import LogSerialization from '../LogSerialization';\nimport RemoteLogging, { __waitForEmptyLogQueueAsync } from '../RemoteLogging';\n\njest.mock('uuid-js', () => ({\n  create() {\n    return {\n      toString() {\n        return 'c0d50576-7ddc-4196-8b1d-01c2d1786631';\n      },\n    };\n  },\n}));\n\njest.mock('../LogSerialization', () => ({\n  serializeLogDataAsync: jest.fn(async data => {\n    return {\n      body: data.map(datum => JSON.stringify(datum)),\n      includesStack: false,\n    };\n  }),\n}));\n\njest.mock('expo-constants', () => ({\n  Constants: require('../../__mocks__/Constants-development'),\n}));\n\nlet originalFetch;\n\nbeforeAll(async () => {\n  originalFetch = global.fetch;\n  global.fetch = jest.fn(async () => _createMockResponse());\n});\n\nafterAll(() => {\n  global.fetch = originalFetch;\n});\n\nit(`sends logs to the server`, async () => {\n  await RemoteLogging.enqueueRemoteLogAsync('info', {}, ['hello!']);\n  await __waitForEmptyLogQueueAsync();\n\n  expect(LogSerialization.serializeLogDataAsync).toHaveBeenCalledTimes(1);\n  expect(fetch).toHaveBeenCalledTimes(1);\n  expect((fetch as jest.Mock).mock.calls[0][0]).toBe('https://localhost:19001/logs');\n  expect((fetch as jest.Mock).mock.calls[0][1].method).toMatch(/^POST$/i);\n  expect((fetch as jest.Mock).mock.calls[0][1].headers).toMatchSnapshot();\n  expect((fetch as jest.Mock).mock.calls[0][1].body).toMatchSnapshot();\n});\n\nit(`limits network requests but eventually sends all logs`, async () => {\n  let resolveFetch;\n  (fetch as jest.Mock).mockImplementationOnce(\n    () =>\n      new Promise(resolve => {\n        resolveFetch = resolve;\n      })\n  );\n\n  await RemoteLogging.enqueueRemoteLogAsync('info', {}, ['hello']);\n  await RemoteLogging.enqueueRemoteLogAsync('info', {}, ['world']);\n  await RemoteLogging.enqueueRemoteLogAsync('info', {}, ['test']);\n\n  expect(fetch).toHaveBeenCalledTimes(1);\n  resolveFetch(_createMockResponse());\n\n  await __waitForEmptyLogQueueAsync();\n  expect(LogSerialization.serializeLogDataAsync).toHaveBeenCalledTimes(3);\n  expect(fetch).toHaveBeenCalledTimes(2);\n});\n\nit(`continues sending logs after a network failure`, async () => {\n  let rejectFetch;\n  (fetch as jest.Mock).mockImplementationOnce(\n    () =>\n      new Promise((resolve, reject) => {\n        rejectFetch = reject;\n      })\n  );\n\n  await RemoteLogging.enqueueRemoteLogAsync('info', {}, ['hello']);\n  await RemoteLogging.enqueueRemoteLogAsync('info', {}, ['world']);\n\n  expect(fetch).toHaveBeenCalledTimes(1);\n  rejectFetch(new Error('Intentional network failure'));\n\n  await __waitForEmptyLogQueueAsync();\n  expect(fetch).toHaveBeenCalledTimes(2);\n  expect((fetch as jest.Mock).mock.calls[1][1].body).toMatch('world');\n});\n\nit(`continues sending logs after a serialization failure`, async () => {\n  (LogSerialization.serializeLogDataAsync as jest.Mock).mockImplementationOnce(async () => {\n    throw new Error('Intentional serialization failure');\n  });\n\n  await expect(RemoteLogging.enqueueRemoteLogAsync('info', {}, ['hello'])).rejects.toBeDefined();\n  await __waitForEmptyLogQueueAsync();\n  expect(fetch).not.toHaveBeenCalled();\n\n  await RemoteLogging.enqueueRemoteLogAsync('info', {}, ['world']);\n  await __waitForEmptyLogQueueAsync();\n  expect(fetch).toHaveBeenCalledTimes(1);\n  expect((fetch as jest.Mock).mock.calls[0][1].body).toMatch('world');\n});\n\ndescribe('addTransportErrorListener', () => {\n  let subscription;\n  let mockListener = jest.fn();\n\n  beforeAll(() => {\n    subscription = RemoteLogging.addTransportErrorListener(mockListener);\n  });\n\n  afterAll(() => {\n    subscription.remove();\n  });\n\n  it(`emits an error event if the network fails`, async () => {\n    (fetch as jest.Mock).mockImplementationOnce(async () => {\n      throw new Error('Intentional network failure');\n    });\n\n    await RemoteLogging.enqueueRemoteLogAsync('info', {}, ['hello!']);\n    await __waitForEmptyLogQueueAsync();\n\n    expect(mockListener).toHaveBeenCalledTimes(1);\n    expect((mockListener as jest.Mock).mock.calls[0][0].error).toBeDefined();\n    expect((mockListener as jest.Mock).mock.calls[0][0].error.message).toMatch('Intentional network failure');\n    expect((mockListener as jest.Mock).mock.calls[0][0].response).not.toBeDefined();\n  });\n\n  it(`emits an error event if the server responds with 500`, async () => {\n    (fetch as jest.Mock).mockImplementationOnce(async () => _createMockResponse({ status: 500 }));\n\n    await RemoteLogging.enqueueRemoteLogAsync('info', {}, ['hello!']);\n    await __waitForEmptyLogQueueAsync();\n\n    expect(mockListener).toHaveBeenCalledTimes(1);\n    expect((mockListener as jest.Mock).mock.calls[0][0].error).toBeDefined();\n    expect((mockListener as jest.Mock).mock.calls[0][0].response).toBeDefined();\n  });\n\n  it(`doesn't emit an error event if the server responds with 200`, async () => {\n    await RemoteLogging.enqueueRemoteLogAsync('info', {}, ['hello!']);\n    await __waitForEmptyLogQueueAsync();\n\n    expect(mockListener).not.toHaveBeenCalled();\n  });\n});\n\nfunction _createMockResponse(fields = {}) {\n  return {\n    status: 200,\n    ...fields,\n  };\n}\n"]}