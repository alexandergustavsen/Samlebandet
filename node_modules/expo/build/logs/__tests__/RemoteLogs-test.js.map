{"version":3,"file":"RemoteLogs-test.js","sourceRoot":"","sources":["../../../src/logs/__tests__/RemoteLogs-test.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,2BAA2B,EAAE,MAAM,kBAAkB,CAAC;AAE/D,IAAI,CAAC,IAAI,CAAC,4DAA4D,EAAE,GAAG,EAAE,CAC3E,IAAI,CAAC,EAAE,CAAC,KAAK,EAAC,KAAK,EAAC,EAAE,CAAC,KAAK,CAAC,CAC9B,CAAC;AAEF,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,CAAC;IACjC,SAAS,EAAE,OAAO,CAAC,uCAAuC,CAAC;CAC5D,CAAC,CAAC,CAAC;AAEJ,IAAI,aAAa,CAAC;AAElB,MAAM,mBAAmB,GAAG;IAC1B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;CACC,CAAC;AAEpB,SAAS,CAAC,GAAG,EAAE;IACb,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC;IAC7B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,GAAG,EAAE;IACZ,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC;AAC/B,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;QACnF,IAAI,YAAY,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACtC,MAAM,CAAC,KAAmB,CAAC,sBAAsB,CAAC,KAAK,IAAI,EAAE;gBAC5D,OAAO,EAAE,CAAC;gBACV,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,IAAI,WAAW,GAAG,aAAa,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;QAEzE,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC3B,MAAM,YAAY,CAAC;QACnB,MAAM,2BAA2B,EAAE,CAAC;QAEpC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC9C,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAE,MAAM,CAAC,KAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAChF,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEnC,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/C,6FAA6F;QAC7F,qEAAqE;IACvE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import RemoteConsole from '../RemoteConsole';\nimport { __waitForEmptyLogQueueAsync } from '../RemoteLogging';\n\njest.mock('react-native/Libraries/Core/Devtools/symbolicateStackTrace', () =>\n  jest.fn(async stack => stack)\n);\n\njest.mock('expo-constants', () => ({\n  Constants: require('../../__mocks__/Constants-development'),\n}));\n\nlet originalFetch;\n\nconst mockOriginalConsole = {\n  error: jest.fn(),\n} as any as Console;\n\nbeforeAll(() => {\n  originalFetch = global.fetch;\n  global.fetch = jest.fn(async () => ({ status: 200 }));\n});\n\nafterAll(() => {\n  global.fetch = originalFetch;\n});\n\ndescribe(`remote console logging`, () => {\n  it(`removes internal console stack frames from the reported stack trace`, async () => {\n    let fetchBarrier = new Promise(resolve => {\n      (global.fetch as jest.Mock).mockImplementationOnce(async () => {\n        resolve();\n        return { status: 200 };\n      });\n    });\n    let mockConsole = RemoteConsole.createRemoteConsole(mockOriginalConsole);\n\n    mockConsole.error('oh no');\n    await fetchBarrier;\n    await __waitForEmptyLogQueueAsync();\n\n    expect(global.fetch).toHaveBeenCalledTimes(1);\n    let requestBody = JSON.parse((global.fetch as jest.Mock).mock.calls[0][1].body);\n    expect(Array.isArray(requestBody)).toBe(true);\n    expect(requestBody.length).toBe(1);\n\n    let logEntry = requestBody[0];\n    expect(logEntry.includesStack).toBe(true);\n    expect(logEntry.body[0].message).toBe('oh no');\n    // TODO: Change the stack trace capturing to happen synchronously with the console.error call\n    // expect(logEntry.body[0].stack).toMatch(path.basename(__filename));\n  });\n});\n"]}