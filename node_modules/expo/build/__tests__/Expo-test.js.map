{"version":3,"file":"Expo-test.js","sourceRoot":"","sources":["../../src/__tests__/Expo-test.ts"],"names":[],"mappings":"AAAA,gGAAgG;AAChG,kGAAkG;AAClG,8EAA8E;AAC9E,MAAM,cAAc,GAAa,CAAC,cAAc,CAAC,CAAC;AAElD,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;IAEhC,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,MAAM,QAAQ,GAAG,YAAY,UAAU,GAAG,CAAC;QAC3C,MAAM,IAAI,GAAG,GAAG,EAAE;YAChB,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YAE7C,0EAA0E;YAC1E,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YAChC,IAAI,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE;gBAC/B,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC;QAEF,IAAI,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACvC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SACzB;aAAM;YACL,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SACpB;KACF;AACH,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,sBAAsB,GAAG,MAAM,CAAC,EAAE;YACtC,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1C,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;gBACxC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE;oBAC1C,YAAY,EAAE,IAAI;oBAClB,UAAU,EAAE,IAAI;oBAChB,QAAQ,EAAE,IAAI;oBACd,KAAK,EAAE,SAAS;iBACjB,CAAC,CAAC;aACJ;QACH,CAAC,CAAC;QACF,4EAA4E;QAC5E,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;QAClD,MAAM,EAAE,kBAAkB,EAAE,GAAG,OAAO,CAAC,2BAA2B,CAAC,CAAC;QACpE,sBAAsB,CAAC,aAAa,CAAC,CAAC;QACtC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;QAE3C,8EAA8E;QAC9E,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAE1B,MAAM,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE;YAC1B,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC;YAC3B,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;gBAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;aAC5B;QACH,CAAC,CAAC;QAEF,MAAM,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,4BAA4B,EAAE,CAAC;IAClE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// This list lets us skip over exports that throw an error when we import them, which can happen\n// when we add or change a native module and haven't yet updated the mocks in jest-expo. This list\n// is a temporary workaround, not a way to indefinitely avoid testing modules.\nconst skippedExports: string[] = ['Localization'];\n\ndescribe(`Expo APIs`, () => {\n  const Expo = require('../Expo');\n\n  const exportNames = Object.keys(Expo);\n  for (const exportName of exportNames) {\n    const testName = `exports \"${exportName}\"`;\n    const test = () => {\n      expect(() => Expo[exportName]).not.toThrow();\n\n      // Ensure we export the default export instead of the module record itself\n      const module = Expo[exportName];\n      if (module && module.__esModule) {\n        expect(module).not.toHaveProperty('default');\n      }\n    };\n\n    if (skippedExports.includes(exportName)) {\n      it.skip(testName, test);\n    } else {\n      it(testName, test);\n    }\n  }\n});\n\ndescribe(`importing Expo`, () => {\n  beforeAll(() => {\n    jest.resetModules();\n  });\n\n  afterEach(() => {\n    jest.resetModules();\n  });\n\n  it(`throws a clear error in bare React Native`, () => {\n    const clearPropertiesInPlace = aThing => {\n      const propertyNames = Object.keys(aThing);\n      for (const propertyName of propertyNames) {\n        Object.defineProperty(aThing, propertyName, {\n          configurable: true,\n          enumerable: true,\n          writable: true,\n          value: undefined,\n        });\n      }\n    };\n    // Clear all the native modules as a way to simulate running outside of Expo\n    const { NativeModules } = require('react-native');\n    const { NativeModulesProxy } = require('expo-react-native-adapter');\n    clearPropertiesInPlace(NativeModules);\n    clearPropertiesInPlace(NativeModulesProxy);\n\n    // Silence \"No native module found\" warnings raised in CRNA and expo-constants\n    const warn = console.warn;\n\n    global.console.warn = str => {\n      let tst = (str || '') + '';\n      if (!tst.includes('No native')) {\n        warn.apply(console, [str]);\n      }\n    };\n\n    expect(() => require('../Expo')).toThrowErrorMatchingSnapshot();\n  });\n});\n"]}