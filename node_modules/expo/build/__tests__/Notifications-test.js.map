{"version":3,"file":"Notifications-test.js","sourceRoot":"","sources":["../../src/__tests__/Notifications-test.ts"],"names":[],"mappings":"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","sourcesContent":["import warning from 'fbjs/lib/warning';\nimport { NativeModules } from 'react-native';\nimport Notifications from '../Notifications';\nimport { mockPlatformIOS, mockPlatformAndroid } from '../../test/mocking';\n\nconst mockNotificationObject = { origin: 'selected', data: {} } as any;\nconst mockNotificationString = JSON.stringify({ origin: 'received', data: {} });\n\njest.mock('fbjs/lib/warning');\njest.mock('react-native/Libraries/EventEmitter/RCTDeviceEventEmitter', () => {\n  const { EventEmitter } = require('fbemitter');\n  return new EventEmitter();\n});\njest.useFakeTimers();\n\ndescribe('Notifications', () => {\n  it('emits the initial notification to listeners', () => {\n    Notifications._setInitialNotification(mockNotificationObject);\n\n    const callback = jest.fn();\n    Notifications.addListener(callback);\n    expect(callback).not.toBeCalled();\n    jest.runAllTimers();\n    expect(callback).toHaveBeenCalledWith(mockNotificationObject);\n  });\n\n  it('only emits the initial notification once', () => {\n    Notifications._setInitialNotification(mockNotificationObject);\n\n    const callback = jest.fn();\n    Notifications.addListener(callback);\n    expect(callback).not.toBeCalled();\n    jest.runAllTimers();\n    expect(callback).toHaveBeenCalledTimes(1);\n\n    const secondCallback = jest.fn();\n    Notifications.addListener(secondCallback);\n    jest.runAllTimers();\n    expect(secondCallback).not.toBeCalled();\n  });\n\n  it('converts a string notification to an object for initial notification', () => {\n    Notifications._setInitialNotification(mockNotificationString as any);\n\n    const callback = jest.fn();\n    Notifications.addListener(callback);\n    jest.runAllTimers();\n    expect(callback).toHaveBeenCalledTimes(1);\n    expect(callback).toHaveBeenCalledWith(JSON.parse(mockNotificationString));\n  });\n\n  it('emits a notification when Exponent.notification is emitted on DeviceEventEmitter', () => {\n    const callback = jest.fn();\n    Notifications.addListener(callback);\n    expect(callback).not.toBeCalled();\n    emitNativeNotification(mockNotificationObject);\n    expect(callback).toHaveBeenCalledTimes(1);\n    expect(callback).toHaveBeenCalledWith(mockNotificationObject);\n  });\n\n  it('converts the Exponent.notification from a string to an object if necessary', () => {\n    const callback = jest.fn();\n    Notifications.addListener(callback);\n    emitNativeNotification(mockNotificationString);\n    expect(callback).toHaveBeenCalledTimes(1);\n    expect(callback).toHaveBeenCalledWith(JSON.parse(mockNotificationString));\n  });\n\n  it('converts the data key from string to an object if necessary', () => {\n    const callback = jest.fn();\n    Notifications.addListener(callback);\n\n    const data = JSON.stringify({ a: 'b' });\n    const mockNotificationObjectWithDataString = { origin: 'selected', data };\n    emitNativeNotification(mockNotificationObjectWithDataString);\n\n    let expectedResult = {\n      ...mockNotificationObjectWithDataString,\n      data: JSON.parse(data),\n    };\n    expect(callback).toHaveBeenCalledWith(expectedResult);\n  });\n\n  it('stops receiving events when removed', () => {\n    const callback = jest.fn();\n    let subscription = Notifications.addListener(callback);\n    emitNativeNotification(mockNotificationObject);\n    expect(callback).toHaveBeenCalledTimes(1);\n    subscription.remove();\n    emitNativeNotification(mockNotificationString);\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n\n  const mockedScheduledNotifIOS = {\n    title: 'Mock notification',\n    body: 'hello',\n  };\n\n  it('properly schedules notification without options', async () => {\n    NativeModules.ExponentNotifications.scheduleLocalNotification = jest.fn();\n\n    await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS);\n\n    expect(NativeModules.ExponentNotifications.scheduleLocalNotification).toHaveBeenCalledTimes(1);\n  });\n\n  it('properly schedules notification when options are correct (time passed as date obj)', async () => {\n    NativeModules.ExponentNotifications.scheduleLocalNotification = jest.fn();\n\n    await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n      time: new Date(),\n      repeat: 'minute',\n    });\n\n    expect(NativeModules.ExponentNotifications.scheduleLocalNotification).toHaveBeenCalledTimes(1);\n  });\n\n  it('properly schedules notification when options are correct (time passed as number)', async () => {\n    NativeModules.ExponentNotifications.scheduleLocalNotification = jest.fn();\n\n    await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n      time: new Date().getTime() + 1000,\n      repeat: 'minute',\n    });\n\n    expect(NativeModules.ExponentNotifications.scheduleLocalNotification).toHaveBeenCalledTimes(1);\n  });\n\n  it('properly passes time as mumber when scheduling notification on ios', async () => {\n    mockPlatformIOS();\n    const spy = jest.fn();\n    NativeModules.ExponentNotifications.scheduleLocalNotification = spy;\n\n    const notifDate = new Date();\n    await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n      // we pass time as date obj, but below it should be passed as number\n      time: notifDate,\n      repeat: 'minute',\n    });\n\n    expect(spy).toHaveBeenCalledTimes(1);\n\n    expect(spy).toHaveBeenCalledWith(\n      { data: {}, ...mockedScheduledNotifIOS },\n      { repeat: 'minute', time: notifDate.getTime() }\n    );\n  });\n\n  it('properly passes time as Date when scheduling notification on Android', async () => {\n    mockPlatformAndroid();\n    const spy = jest.fn();\n    NativeModules.ExponentNotifications.scheduleLocalNotification = spy;\n\n    const notifDate = new Date();\n    await Notifications.scheduleLocalNotificationAsync(\n      { title: 'Android notification' },\n      {\n        // we pass time as number, but below it should be passed as date\n        time: notifDate.getTime(),\n        repeat: 'minute',\n      }\n    );\n\n    expect(spy).toHaveBeenCalledTimes(1);\n\n    expect(spy).toHaveBeenCalledWith(\n      { data: {}, title: 'Android notification' },\n      { repeat: 'minute', time: notifDate }\n    );\n  });\n\n  it('properly passes \"options.intervalMs\" when scheduling notification on android', async () => {\n    mockPlatformAndroid();\n    const spy = jest.fn();\n    NativeModules.ExponentNotifications.scheduleLocalNotification = spy;\n\n    const notifDate = new Date();\n    await Notifications.scheduleLocalNotificationAsync(\n      { title: 'Android notification' },\n      {\n        // we pass time as number, but below it should be passed as date\n        time: notifDate.getTime(),\n        intervalMs: 1000,\n      }\n    );\n\n    expect(spy).toHaveBeenCalledTimes(1);\n\n    expect(spy).toHaveBeenCalledWith(\n      { data: {}, title: 'Android notification' },\n      { intervalMs: 1000, time: notifDate }\n    );\n  });\n\n  it('properly detects invalid time value in scheduled notification options', async () => {\n    NativeModules.ExponentNotifications.scheduleLocalNotification = jest.fn();\n\n    try {\n      await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n        time: 'INVALID' as any,\n      });\n    } catch (e) {\n      expect(e).toEqual(\n        new Error(\n          `Provided value for \"time\" is invalid. Please verify that it's either \\\na number representing Unix Epoch time in milliseconds, or a valid date object.`\n        )\n      );\n    }\n\n    try {\n      await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n        time: {} as any,\n      });\n    } catch (e) {\n      expect(e).toEqual(\n        new Error(\n          `Provided value for \"time\" is invalid. Please verify that it's either \\\na number representing Unix Epoch time in milliseconds, or a valid date object.`\n        )\n      );\n    }\n\n    expect(NativeModules.ExponentNotifications.scheduleLocalNotification).toHaveBeenCalledTimes(0);\n  });\n\n  it('properly warns when time value prior to now is used in scheduled notification options', async () => {\n    NativeModules.ExponentNotifications.scheduleLocalNotification = jest.fn();\n\n    await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n      time: new Date().getTime() / 1000, // accidently pass seconds instead of milliseconds\n    });\n\n    expect(warning).toBeCalledWith(\n      false,\n      `Provided value for \"time\" is before the current date. Did you possibly \\\npass number of seconds since Unix Epoch instead of number of milliseconds?`\n    );\n\n    expect(NativeModules.ExponentNotifications.scheduleLocalNotification).toHaveBeenCalledTimes(1);\n  });\n\n  it('properly throws for invalid use of \"options.repeat\" in scheduled notification options', async () => {\n    NativeModules.ExponentNotifications.scheduleLocalNotification = jest.fn();\n    try {\n      await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n        repeat: 'foobar' as any,\n      });\n    } catch (e) {\n      expect(e).toMatchSnapshot();\n    }\n\n    expect(NativeModules.ExponentNotifications.scheduleLocalNotification).toHaveBeenCalledTimes(0);\n  });\n\n  it('properly throws if \"options.intervalMs\" is used on iOS', async () => {\n    mockPlatformIOS();\n    const spy = jest.fn();\n    NativeModules.ExponentNotifications.scheduleLocalNotification = spy;\n    try {\n      await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n        intervalMs: 60000,\n      });\n    } catch (e) {\n      expect(e).toMatchSnapshot();\n    }\n\n    expect(NativeModules.ExponentNotifications.scheduleLocalNotification).toHaveBeenCalledTimes(0);\n  });\n\n  it('properly throws if both \"options.repeat\" and \"options.intervalMs\" are set in scheduled notification options on android', async () => {\n    mockPlatformAndroid();\n    NativeModules.ExponentNotifications.scheduleLocalNotification = jest.fn();\n    try {\n      await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n        intervalMs: 60000,\n        repeat: 'minute',\n      });\n    } catch (e) {\n      expect(e).toMatchSnapshot();\n    }\n\n    expect(NativeModules.ExponentNotifications.scheduleLocalNotification).toHaveBeenCalledTimes(0);\n  });\n\n  it('properly throws for negative number for \"options.intervalMs\" in scheduled notification options on android', async () => {\n    mockPlatformAndroid();\n    NativeModules.ExponentNotifications.scheduleLocalNotification = jest.fn();\n    try {\n      await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n        intervalMs: -1000,\n      });\n    } catch (e) {\n      expect(e).toMatchSnapshot();\n    }\n\n    expect(NativeModules.ExponentNotifications.scheduleLocalNotification).toHaveBeenCalledTimes(0);\n  });\n\n  it('properly throws for non-integer for \"options.intervalMs\" in scheduled notification options on android', async () => {\n    mockPlatformAndroid();\n    NativeModules.ExponentNotifications.scheduleLocalNotification = jest.fn();\n    try {\n      await Notifications.scheduleLocalNotificationAsync(mockedScheduledNotifIOS, {\n        intervalMs: 0.1,\n      });\n    } catch (e) {\n      expect(e).toMatchSnapshot();\n    }\n\n    expect(NativeModules.ExponentNotifications.scheduleLocalNotification).toHaveBeenCalledTimes(0);\n  });\n});\n\nfunction emitNativeNotification(notif) {\n  require('react-native/Libraries/EventEmitter/RCTDeviceEventEmitter').emit(\n    'Exponent.notification',\n    notif\n  );\n}\n"]}