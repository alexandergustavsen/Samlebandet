{"version":3,"file":"Location-test.js","sourceRoot":"","sources":["../../src/__tests__/Location-test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Location } from 'expo-location';\nimport { NativeModulesProxy } from 'expo-core';\n\nimport {\n  mockProperty,\n  unmockAllProperties,\n  mockPlatformIOS,\n  mockPlatformAndroid,\n} from '../../test/mocking';\n\nconst fakeReturnValue = {\n  coords: {\n    latitude: 1,\n    longitude: 2,\n    altitude: 3,\n    accuracy: 4,\n    heading: 5,\n    speed: 6,\n  },\n  timestamp: 7,\n};\n\nfunction applyMocks() {\n  mockProperty(\n    NativeModulesProxy.ExpoLocation,\n    'getCurrentPositionAsync',\n    jest.fn(async () => fakeReturnValue)\n  );\n  mockProperty(NativeModulesProxy.ExpoLocation, 'requestPermissionsAsync', jest.fn(async () => {}));\n}\n\ndescribe('Location', () => {\n  beforeEach(() => {\n    applyMocks();\n  });\n\n  afterEach(() => {\n    unmockAllProperties();\n  });\n\n  describe('getCurrentPositionAsync', () => {\n    it('works on Android', async () => {\n      mockPlatformAndroid();\n      const result = await Location.getCurrentPositionAsync({});\n      expect(result).toEqual(fakeReturnValue);\n    });\n\n    it('works on iOS', async () => {\n      mockPlatformIOS();\n      const result = await Location.getCurrentPositionAsync({});\n      expect(result).toEqual(fakeReturnValue);\n    });\n  });\n\n  describe('watchPositionAsync', () => {\n    it('receives repeated events', async () => {\n      let resolveBarrier;\n      const callback = jest.fn();\n      const watchBarrier = new Promise(resolve => {\n        resolveBarrier = resolve;\n      });\n      mockProperty(\n        NativeModulesProxy.ExpoLocation,\n        'watchPositionImplAsync',\n        jest.fn(resolveBarrier)\n      );\n      await Location.watchPositionAsync({}, callback);\n      await watchBarrier;\n\n      emitNativeLocationUpdate(fakeReturnValue);\n      emitNativeLocationUpdate(fakeReturnValue);\n      expect(callback).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('geocodeAsync', () => {\n    it('falls back to Google Maps API on Android without Google Play services', () => {\n      mockPlatformAndroid();\n      mockProperty(NativeModulesProxy.ExpoLocation, 'geocodeAsync', async () => {\n        const error = new Error();\n        (error as any).code = 'E_NO_GEOCODER';\n        throw error;\n      });\n      return expect(Location.geocodeAsync('Googleplex')).rejects.toEqual(\n        expect.objectContaining({\n          message: expect.stringContaining('Please set a Google API Key'),\n        })\n      );\n    });\n  });\n\n  describe('reverseGeocodeAsync', () => {\n    it('rejects non-numeric latitude/longitude', () => {\n      return expect(\n        Location.reverseGeocodeAsync({ latitude: '37.7', longitude: '-122.5' })\n      ).rejects.toEqual(expect.any(TypeError));\n    });\n  });\n\n  describe('navigator.geolocation polyfill', () => {\n    beforeEach(() => {\n      applyMocks();\n    });\n\n    afterEach(() => {\n      unmockAllProperties();\n    });\n\n    describe('getCurrentPosition', () => {\n      it('delegates to getCurrentPositionAsync', async () => {\n        let pass;\n        const barrier = new Promise(resolve => {\n          pass = resolve;\n        });\n        const options = {};\n        navigator.geolocation.getCurrentPosition(pass, pass, options);\n        await barrier;\n        expect(NativeModulesProxy.ExpoLocation.getCurrentPositionAsync).toHaveBeenCalledWith(\n          options\n        );\n      });\n    });\n\n    describe('watchPosition', () => {\n      it('watches for updates and stops when clearWatch is called', async () => {\n        let resolveBarrier;\n        const watchBarrier = new Promise(resolve => {\n          resolveBarrier = resolve;\n        });\n        mockProperty(\n          NativeModulesProxy.ExpoLocation,\n          'watchPositionImplAsync',\n          jest.fn(async () => {\n            resolveBarrier();\n          })\n        );\n        const callback = jest.fn();\n\n        const watchId = navigator.geolocation.watchPosition(callback);\n        await watchBarrier;\n\n        emitNativeLocationUpdate(fakeReturnValue);\n        emitNativeLocationUpdate(fakeReturnValue);\n        expect(callback).toHaveBeenCalledTimes(2);\n\n        navigator.geolocation.clearWatch(watchId);\n        emitNativeLocationUpdate(fakeReturnValue);\n        expect(callback).toHaveBeenCalledTimes(2);\n      });\n    });\n  });\n});\n\nfunction emitNativeLocationUpdate(location) {\n  Location.EventEmitter.emit('Exponent.locationChanged', {\n    watchId: Location._getCurrentWatchId(),\n    location,\n  });\n}\n"]}