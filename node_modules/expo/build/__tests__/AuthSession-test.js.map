{"version":3,"file":"AuthSession-test.js","sourceRoot":"","sources":["../../src/__tests__/AuthSession-test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants } from 'expo-constants';\n\nimport AuthSession from '../AuthSession';\nimport { WebBrowser } from '../Expo';\n\nimport { mockLinking, mockProperty, unmockAllProperties } from '../../test/mocking';\n\nfunction applyMocks() {\n  mockProperty(Constants.manifest, 'id', '@example/abc');\n}\n\nfunction mockOpenAuthSessionAsync(openBrowserFn) {\n  mockProperty(WebBrowser, 'openAuthSessionAsync', jest.fn(openBrowserFn));\n}\n\nbeforeEach(() => {\n  applyMocks();\n});\n\nafterEach(() => {\n  unmockAllProperties();\n});\n\nit('returns correct redirect URL from getRedirectUrl', () => {\n  expect(AuthSession.getRedirectUrl()).toEqual('https://auth.expo.io/@example/abc');\n});\n\nit('returns the correct return URL from getDefaultReturnUrl', () => {\n  expect(AuthSession.getDefaultReturnUrl()).toEqual(\n    'exp://exp.host/@test/test/--/expo-auth-session'\n  );\n});\n\nit('returns the correct start URL from getStartUrl', () => {\n  const authUrl = 'https://signin.com';\n  const returnUrl = 'exp://expo.io/@example/abc+';\n  const result = AuthSession.getStartUrl(authUrl, returnUrl);\n  expect(result).toEqual(\n    'https://auth.expo.io/@example/abc/start?authUrl=https%3A%2F%2Fsignin.com&returnUrl=exp%3A%2F%2Fexpo.io%2F%40example%2Fabc%2B'\n  );\n});\n\nit('opens WebBrowser startAsync to the start URL', async () => {\n  const authUrl = 'abcd.com';\n  const returnUrl = 'efgh.com';\n\n  mockOpenAuthSessionAsync(async () => ({ type: 'cancel' }));\n  await AuthSession.startAsync({ authUrl, returnUrl });\n\n  expect(WebBrowser.openAuthSessionAsync).toHaveBeenCalledWith(\n    AuthSession.getStartUrl(authUrl, returnUrl),\n    returnUrl\n  );\n});\n\nit('only lets you call startAsync once at a time', async () => {\n  const authUrl = 'abcd.com';\n  const returnUrl = 'efgh.com';\n  const normalResponse = { type: 'cancel' };\n  const lockedResponse = { type: 'locked' };\n\n  mockProperty(console, 'warn', jest.fn());\n\n  jest.useFakeTimers();\n\n  mockOpenAuthSessionAsync(() => {\n    return new Promise(resolve => {\n      setTimeout(() => resolve(normalResponse), 0);\n    });\n  });\n\n  let parallelStartAsyncCalls = Promise.all([\n    AuthSession.startAsync({ authUrl, returnUrl }),\n    AuthSession.startAsync({ authUrl, returnUrl }),\n  ]);\n\n  jest.runAllTimers();\n\n  let [first, second] = await parallelStartAsyncCalls;\n  expect(first).toEqual(normalResponse);\n  expect(second).toEqual(lockedResponse);\n  expect(console.warn).toHaveBeenCalledWith(expect.stringMatching(/Only one AuthSession/));\n});\n\nit('returns success with params on redirect', async () => {\n  const emitLinkingEvent = mockLinking();\n  const authUrl = 'http://example.io';\n  const returnUrl = 'https://example-return.io/+';\n  const returnUrlWithParams = `${returnUrl}?id=42#token=abc123`;\n\n  let authSessionPromise = AuthSession.startAsync({\n    authUrl,\n    returnUrl,\n  });\n  emitLinkingEvent('url', { url: returnUrlWithParams });\n  let result = await authSessionPromise;\n\n  expect(result.type).toEqual('success');\n  expect((result as any).params).toEqual({ token: 'abc123', id: '42' });\n});\n\nit('returns error when errorCode is present', async () => {\n  const emitLinkingEvent = mockLinking();\n\n  const authUrl = 'http://example.io';\n  const returnUrl = 'https://example-return.io/+';\n  let authSessionPromise = AuthSession.startAsync({\n    authUrl,\n    returnUrl,\n  });\n\n  const returnUrlWithParams = `${returnUrl}?errorCode=nope&id=42`;\n  emitLinkingEvent('url', { url: returnUrlWithParams });\n\n  let result = await authSessionPromise;\n  expect(result.type).toEqual('error');\n  expect((result as any).errorCode).toEqual('nope');\n  expect((result as any).params).toEqual({ id: '42' });\n});\n\nit('throws from AuthSession.startAsync if authUrl is falsy', async () => {\n  expect.assertions(1);\n  try {\n    await AuthSession.startAsync({\n      authUrl: null as any,\n    });\n  } catch (e) {\n    expect(e).toMatchSnapshot();\n  }\n});\n\nit('lets us call AuthSession.startAsync after param validation throws', async () => {\n  AuthSession.startAsync({ authUrl: null as any });\n\n  const emitLinkingEvent = mockLinking();\n  const authUrl = 'http://example.io';\n  const returnUrl = 'https://example-return.io/+';\n  const returnUrlWithParams = `${returnUrl}?id=42#token=abc123`;\n\n  let authSessionPromise = AuthSession.startAsync({\n    authUrl,\n    returnUrl,\n  });\n  emitLinkingEvent('url', { url: returnUrlWithParams });\n\n  let result = await authSessionPromise;\n\n  expect(result.type).not.toEqual('locked');\n});\n\nit('returns getRedirectUrl and calls a warning when getRedirectUri is called', () => {\n  mockProperty(console, 'warn', jest.fn());\n  expect(AuthSession.getRedirectUri()).toEqual(AuthSession.getRedirectUrl());\n\n  expect((console.warn as jest.Mock).mock.calls).toMatchSnapshot();\n});\n\nit('warns if user is @anonymous in getRedirectUrl', () => {\n  mockProperty(Constants.manifest, 'id', '@anonymous/abc');\n  mockProperty(console, 'warn', jest.fn());\n  AuthSession.getRedirectUrl();\n  expect((console.warn as jest.Mock).mock.calls).toMatchSnapshot();\n});\n"]}