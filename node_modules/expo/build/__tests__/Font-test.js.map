{"version":3,"file":"Font-test.js","sourceRoot":"","sources":["../../src/__tests__/Font-test.ts"],"names":[],"mappings":"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","sourcesContent":["import { mockProperty } from '../../test/mocking';\n\njest.mock('expo-constants', () => ({\n  Constants: {\n    manifest: {},\n    sessionId: 'testsession',\n    systemFonts: ['Helvetica', 'Helvetica Neue'],\n  },\n}));\n\nlet NativeModulesProxy;\nlet Font;\n\nfunction applyMocks() {\n  mockProperty(NativeModulesProxy.ExpoFontLoader, 'loadAsync', jest.fn(async () => {}));\n}\n\nbeforeEach(() => {\n  NativeModulesProxy = require('expo-core').NativeModulesProxy;\n  Font = require('expo-font').Font;\n\n  applyMocks();\n});\n\nafterEach(() => {\n  jest.resetModules();\n});\n\ndescribe('loadAsync', () => {\n  it(`completes after loading a font`, async () => {\n    const NativeFontLoader = NativeModulesProxy.ExpoFontLoader;\n\n    const mockAsset = _createMockAsset();\n    await Font.loadAsync('test-font', mockAsset);\n\n    expect(mockAsset.downloaded).toBe(true);\n    expect(NativeFontLoader.loadAsync).toHaveBeenCalledTimes(1);\n    expect(NativeFontLoader.loadAsync.mock.calls[0]).toMatchSnapshot();\n    expect(Font.isLoaded('test-font')).toBe(true);\n    expect(Font.isLoading('test-font')).toBe(false);\n  });\n\n  it(`throws if downloading a font fails`, async () => {\n    const NativeFontLoader = NativeModulesProxy.ExpoFontLoader;\n\n    const mockAsset = {\n      downloaded: false,\n      downloadAsync: jest.fn(async () => {}),\n    };\n    await expect(Font.loadAsync('test-font', mockAsset)).rejects.toMatchSnapshot();\n\n    expect(mockAsset.downloaded).toBe(false);\n    expect(NativeFontLoader.loadAsync).not.toHaveBeenCalled();\n    expect(Font.isLoaded('test-font')).toBe(false);\n    expect(Font.isLoading('test-font')).toBe(false);\n  });\n\n  it(`throws if loading a downloaded font fails`, async () => {\n    const NativeFontLoader = NativeModulesProxy.ExpoFontLoader;\n    NativeFontLoader.loadAsync.mockImplementation(async () => {\n      throw new Error('Intentional error from FontLoader mock');\n    });\n\n    const mockAsset = _createMockAsset();\n    await expect(Font.loadAsync('test-font', mockAsset)).rejects.toMatchSnapshot();\n\n    expect(mockAsset.downloaded).toBe(true);\n    expect(NativeFontLoader.loadAsync).toHaveBeenCalled();\n    expect(Font.isLoaded('test-font')).toBe(false);\n    expect(Font.isLoading('test-font')).toBe(false);\n  });\n\n  it(`doesn't redownload a loaded font`, async () => {\n    const NativeFontLoader = NativeModulesProxy.ExpoFontLoader;\n\n    const mockAsset1 = _createMockAsset();\n    await Font.loadAsync('test-font', mockAsset1);\n    expect(NativeFontLoader.loadAsync).toHaveBeenCalledTimes(1);\n\n    const mockAsset2 = _createMockAsset();\n    await Font.loadAsync('test-font', mockAsset2);\n    expect(NativeFontLoader.loadAsync).toHaveBeenCalledTimes(1);\n    expect(Font.isLoaded('test-font')).toBe(true);\n    expect(Font.isLoading('test-font')).toBe(false);\n  });\n\n  it(`can load an already downloaded asset`, async () => {\n    const mockAsset = _createMockAsset();\n    await Font.loadAsync('test-font', mockAsset);\n\n    const loadPromise = Font.loadAsync('test-font', mockAsset);\n    expect(Font.isLoading('test-font')).toBe(false);\n    expect(Font.isLoaded('test-font')).toBe(true);\n\n    await loadPromise;\n    expect(Font.isLoading('test-font')).toBe(false);\n    expect(Font.isLoaded('test-font')).toBe(true);\n  });\n\n  it(`downloads a font that failed to load`, async () => {\n    const NativeFontLoader = NativeModulesProxy.ExpoFontLoader;\n\n    const mockAsset1 = {\n      downloaded: false,\n      downloadAsync: jest.fn(async () => {}),\n    };\n    await expect(Font.loadAsync('test-font', mockAsset1)).rejects.toBeDefined();\n    expect(NativeFontLoader.loadAsync).not.toHaveBeenCalled();\n    expect(Font.isLoaded('test-font')).toBe(false);\n    expect(Font.isLoading('test-font')).toBe(false);\n\n    const mockAsset2 = _createMockAsset();\n    await Font.loadAsync('test-font', mockAsset2);\n    expect(NativeFontLoader.loadAsync).toHaveBeenCalledTimes(1);\n    expect(Font.isLoaded('test-font')).toBe(true);\n    expect(Font.isLoading('test-font')).toBe(false);\n  });\n\n  it(`coalesces concurrent loads`, async () => {\n    const NativeFontLoader = NativeModulesProxy.ExpoFontLoader;\n\n    const mockAsset1 = _createMockAsset();\n    const loadPromise1 = Font.loadAsync('test-font', mockAsset1);\n    expect(Font.isLoaded('test-font')).toBe(false);\n    expect(Font.isLoading('test-font')).toBe(true);\n\n    const mockAsset2 = _createMockAsset();\n    const loadPromise2 = Font.loadAsync('test-font', mockAsset2);\n    expect(Font.isLoaded('test-font')).toBe(false);\n    expect(Font.isLoading('test-font')).toBe(true);\n\n    await Promise.all([loadPromise1, loadPromise2]);\n    expect(NativeFontLoader.loadAsync).toHaveBeenCalledTimes(1);\n    expect(Font.isLoaded('test-font')).toBe(true);\n    expect(Font.isLoading('test-font')).toBe(false);\n  });\n\n  it(`rejects all coalesced loads`, async () => {\n    const mockAsset1 = {\n      downloaded: false,\n      downloadAsync: jest.fn(async () => {}),\n    };\n    const loadPromise1 = Font.loadAsync('test-font', mockAsset1);\n    expect(Font.isLoaded('test-font')).toBe(false);\n    expect(Font.isLoading('test-font')).toBe(true);\n\n    const mockAsset2 = _createMockAsset();\n    const loadPromise2 = Font.loadAsync('test-font', mockAsset2);\n    expect(Font.isLoaded('test-font')).toBe(false);\n    expect(Font.isLoading('test-font')).toBe(true);\n\n    await expect(loadPromise1).rejects.toBeDefined();\n    await expect(loadPromise2).rejects.toBeDefined();\n    expect(Font.isLoaded('test-font')).toBe(false);\n    expect(Font.isLoading('test-font')).toBe(false);\n  });\n\n  it(`accepts a map of fonts to multi-load`, async () => {\n    await Font.loadAsync({\n      'test-font-1': _createMockAsset({\n        localUri: 'file:/test/test-font-1.ttf',\n      }),\n      'test-font-2': _createMockAsset({\n        localUri: 'file:/test/test-font-2.ttf',\n      }),\n    });\n    expect(Font.isLoaded('test-font-1')).toBe(true);\n    expect(Font.isLoaded('test-font-2')).toBe(true);\n  });\n\n  it(`rejects if any font in the map fails to load`, async () => {\n    const mockAsset2 = {\n      downloaded: false,\n      downloadAsync: jest.fn(async () => {}),\n    };\n\n    await expect(\n      Font.loadAsync({\n        'test-font-1': _createMockAsset({\n          localUri: 'file:/test/test-font-1.ttf',\n        }),\n        'test-font-2': mockAsset2,\n      })\n    ).rejects.toBeDefined();\n\n    // We don't guarantee whether the first font will have loaded or\n    // even finished loading but the internal state should be\n    // consistent\n    expect(() => Font.isLoaded('test-font-1')).not.toThrow();\n    expect(() => Font.isLoading('test-font-1')).not.toThrow();\n    expect(Font.isLoaded('test-font-2')).toBe(false);\n  });\n\n  it(`coalesces concurrent loads across maps`, async () => {\n    const NativeFontLoader = NativeModulesProxy.ExpoFontLoader;\n\n    const loadPromise1 = Font.loadAsync({\n      'test-font-1': _createMockAsset({\n        localUri: 'file:/test/test-font-1.ttf',\n      }),\n      'test-font-2': _createMockAsset({\n        localUri: 'file:/test/test-font-2.ttf',\n      }),\n    });\n    expect(Font.isLoaded('test-font-1')).toBe(false);\n    expect(Font.isLoaded('test-font-2')).toBe(false);\n    expect(Font.isLoading('test-font-1')).toBe(true);\n    expect(Font.isLoading('test-font-2')).toBe(true);\n\n    const loadPromise2 = Font.loadAsync({\n      'test-font-1': _createMockAsset({\n        localUri: 'file:/test/test-font-1.ttf',\n      }),\n    });\n    expect(Font.isLoaded('test-font-1')).toBe(false);\n    expect(Font.isLoading('test-font-1')).toBe(true);\n\n    await Promise.all([loadPromise1, loadPromise2]);\n    expect(NativeFontLoader.loadAsync).toHaveBeenCalledTimes(2);\n    expect(Font.isLoaded('test-font-1')).toBe(true);\n    expect(Font.isLoaded('test-font-2')).toBe(true);\n    expect(Font.isLoading('test-font-1')).toBe(false);\n    expect(Font.isLoading('test-font-2')).toBe(false);\n  });\n});\n\ndescribe('processFontFamily', () => {\n  let originalConsole;\n\n  beforeEach(() => {\n    originalConsole = global.console;\n  });\n\n  afterEach(() => {\n    global.console = originalConsole;\n  });\n\n  it(`handles empty values`, () => {\n    expect(Font.processFontFamily(null)).toBeNull();\n    expect(Font.processFontFamily(undefined)).toBeUndefined();\n  });\n\n  it(`handles the system font`, () => {\n    expect(Font.processFontFamily('System')).toBe('System');\n  });\n\n  it(`handles built-in fonts`, () => {\n    expect(Font.processFontFamily('Helvetica')).toBe('Helvetica');\n  });\n\n  it(`defaults missing fonts to the system font`, () => {\n    console.error = jest.fn();\n\n    const fontName = 'not-loaded';\n    expect(Font.isLoaded(fontName)).toBe(false);\n    expect(Font.processFontFamily(fontName)).toBe('System');\n    expect(console.error).toHaveBeenCalled();\n    expect((console.error as jest.Mock).mock.calls[0]).toMatchSnapshot();\n  });\n\n  it(`defaults still-loading fonts to the system font`, () => {\n    console.error = jest.fn();\n\n    const fontName = 'loading';\n    const mockAsset = _createMockAsset();\n    Font.loadAsync(fontName, mockAsset);\n    expect(Font.isLoaded(fontName)).toBe(false);\n    expect(Font.isLoading(fontName)).toBe(true);\n\n    expect(Font.processFontFamily(fontName)).toBe('System');\n    expect(console.error).toHaveBeenCalled();\n    expect((console.error as jest.Mock).mock.calls[0]).toMatchSnapshot();\n  });\n\n  it(`scopes loaded names of loaded fonts`, async () => {\n    const fontName = 'test-font';\n    const mockAsset = _createMockAsset();\n    await Font.loadAsync(fontName, mockAsset);\n    expect(Font.isLoaded(fontName)).toBe(true);\n\n    const processedFontFamily = Font.processFontFamily(fontName);\n    expect(processedFontFamily).toContain(fontName);\n    expect(processedFontFamily).toMatchSnapshot();\n  });\n\n  it(`doesn't re-process Expo fonts`, async () => {\n    const fontName = 'test-font';\n    const mockAsset = _createMockAsset();\n    await Font.loadAsync(fontName, mockAsset);\n    expect(Font.isLoaded(fontName)).toBe(true);\n\n    const processedFontFamily = Font.processFontFamily(fontName);\n    expect(Font.processFontFamily(processedFontFamily)).toBe(processedFontFamily);\n  });\n});\n\nfunction _createMockAsset({\n  localUri = 'file:/test/test-font.ttf',\n}: MockAssetOptions = {}): MockAsset {\n  const mockAsset: MockAsset = {\n    downloaded: false,\n    downloadAsync: jest.fn(async () => {\n      mockAsset.downloaded = true;\n      mockAsset.localUri = localUri;\n    }),\n  };\n  return mockAsset;\n}\n\ntype MockAsset = { downloaded: boolean; downloadAsync: () => Promise<void>; localUri?: string };\ntype MockAssetOptions = { localUri?: string };\n"]}