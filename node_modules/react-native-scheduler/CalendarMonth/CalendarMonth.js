import * as tslib_1 from "tslib";
import moment from "moment";
import * as React from "react";
import { View } from "react-native";
import { styles } from "./CalendarMonth.styles";
import { DateCalendarBox } from "./DateCalendarBox";
import { MonthSelection } from "./MonthSelection";
import { WeekDayHeader } from "./WeekDayHeader";
var nBoxToDateMapper = function (year, month, scheduleToUserMap, selectedDate) {
    var date = new Date(year, month, 1);
    var result = {};
    var startDayOfTheMonth = date.getDay();
    while (date.getMonth() === month) {
        var currentDay = date.getDay();
        var ms = date.getTime();
        var usersBusy = [];
        var isWeekend = false;
        var isSelected = date.getDate() === selectedDate;
        if (currentDay === 0 || currentDay === 6) {
            isWeekend = true;
        }
        if (scheduleToUserMap[ms]) {
            usersBusy = scheduleToUserMap[ms];
        }
        result[startDayOfTheMonth] = {
            dateNumber: date.getDate(),
            isWeekend: isWeekend,
            usersBusy: usersBusy,
            isSelected: isSelected
        };
        startDayOfTheMonth += 1;
        date.setDate(date.getDate() + 1);
    }
    return result;
};
var flattenTaskSchedule = function (data) {
    var mapped = {};
    data.forEach(function (value) {
        value.tasks.forEach(function (task) {
            var dateOnly = new Date(task.startTime.getFullYear(), task.startTime.getMonth(), task.startTime.getDate());
            var ms = dateOnly.getTime();
            var arrayUser = [];
            if (!mapped[ms]) {
                arrayUser = [];
            }
            else {
                arrayUser = mapped[ms].slice();
            }
            arrayUser.push(value.user);
            mapped[ms] = arrayUser;
        });
    });
    return mapped;
};
var CalendarMonth = /** @class */ (function (_super) {
    tslib_1.__extends(CalendarMonth, _super);
    function CalendarMonth(props) {
        var _this = _super.call(this, props) || this;
        _this.boxes = 35;
        _this.containerOnLayout = function (event) {
            var dateBoxWidth = event.nativeEvent.layout.width / 7.01;
            _this.setState({ dateBoxWidth: dateBoxWidth });
        };
        _this.onMonthChange = function (month, year) {
            _this.setState({
                currentMonth: month,
                currentYear: year,
                selectedDate: undefined
            });
        };
        _this.onDatePress = function (date) {
            _this.setState({
                selectedDate: date
            });
        };
        var today = moment();
        _this.state = {
            dateBoxWidth: 0,
            currentMonth: today.month(),
            currentYear: today.year()
        };
        return _this;
    }
    CalendarMonth.prototype.generateBoxes = function (data) {
        var all = nBoxToDateMapper(this.state.currentYear, this.state.currentMonth, data, this.state.selectedDate);
        var n = 0;
        var els = [];
        while (n < this.boxes) {
            var obj = all[n];
            var el = void 0;
            if (obj) {
                el = (<DateCalendarBox key={"date-" + n} date={obj.dateNumber} boxWidth={this.state.dateBoxWidth} dateFontSize={13} isSelected={obj.isSelected} isWeekend={obj.isWeekend} whosBusy={obj.usersBusy} dateBoxOnPressHandler={this.onDatePress}/>);
            }
            else {
                el = (<DateCalendarBox key={"date-" + n} boxWidth={this.state.dateBoxWidth} dateFontSize={12} isSelected={false} isWeekend={false} whosBusy={[]} dateBoxOnPressHandler={this.onDatePress}/>);
            }
            els.push(el);
            n += 1;
        }
        return els;
    };
    CalendarMonth.prototype.render = function () {
        var indicator = {};
        if (this.props.data) {
            indicator = flattenTaskSchedule(this.props.data);
        }
        var boxes = this.generateBoxes(indicator);
        return (<View style={styles.container}>
                <View style={styles.containerMonthSelection}>
                    <MonthSelection onMonthChange={this.onMonthChange} currentMonth={this.state.currentMonth} currentYear={this.state.currentYear}/>
                </View>
                <View style={styles.containerWeekday}>
                    <WeekDayHeader />
                </View>
                <View onLayout={this.containerOnLayout} style={styles.containerDates}>
                    {boxes.map(function (value) {
            return value;
        })}
                </View>
            </View>);
    };
    return CalendarMonth;
}(React.Component));
export { CalendarMonth };
//# sourceMappingURL=CalendarMonth.js.map