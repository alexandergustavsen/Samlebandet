import * as tslib_1 from "tslib";
import { Component } from "react";
import * as React from "react";
import { Button, ScrollView, View } from "react-native";
import { styles } from "./UserSelect.style";
var UserSelect = /** @class */ (function (_super) {
    tslib_1.__extends(UserSelect, _super);
    function UserSelect(props) {
        var _this = _super.call(this, props) || this;
        _this.selectUser = function (user, idx) {
            var newSelectedUser = tslib_1.__assign({}, _this.state.selectedUser);
            if (newSelectedUser[idx]) {
                delete newSelectedUser[idx];
            }
            else {
                newSelectedUser[idx] = user;
            }
            _this.setState({ selectedUser: newSelectedUser });
            var allValues = Object.keys(newSelectedUser).map(function (key) { return newSelectedUser[key]; });
            _this.props.onSelectedEvent(allValues);
        };
        if (props.data) {
            var selectedUser_1 = {};
            props.data.forEach(function (value, idx) {
                if (value.isSelected) {
                    selectedUser_1[idx] = props.data[idx];
                }
            });
            _this.state = {
                selectedUser: selectedUser_1
            };
        }
        else {
            _this.state = {
                selectedUser: {}
            };
        }
        return _this;
    }
    UserSelect.prototype.renderButtons = function () {
        var _this = this;
        if (this.props.data) {
            var newSelectedUser_1 = tslib_1.__assign({}, this.state.selectedUser);
            return this.props.data.map(function (x, idx) {
                return <View style={[styles.backgroundMidle]} key={"" + idx}>
          <View style={{ backgroundColor: newSelectedUser_1[idx] ? x.colourIndicator : "white" }}>
            <Button color={newSelectedUser_1[idx] ? "white" : "black"} title={x.name} onPress={function () {
                    _this.selectUser(x, idx);
                }}/>
          </View>
        </View>;
            });
        }
        return null;
    };
    UserSelect.prototype.render = function () {
        return (<ScrollView style={styles.container}>
        <View style={styles.alightViewWithPadings}>
          {this.renderButtons()}
        </View>
      </ScrollView>);
    };
    return UserSelect;
}(Component));
export { UserSelect };
//# sourceMappingURL=UserSelect.js.map